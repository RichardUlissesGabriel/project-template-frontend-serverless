# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - dev
      - test
      - homolog
      - master

  pull_request:
    branches:
      - dev
      - test
      - homolog
      - master

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version:
          - 12.x

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: build
        run: npm run build:${GITHUB_REF##*/}

      # Runs a set of commands using the runners shell
      - name: deploy
        shell: bash
        run: |

          function print_message {
            echo "==============================================================="
            echo $1
            echo "==============================================================="
          }

          function deploy() {

            print_message "Geting all infos from parameter store - Start"
            PROJECT_NAME=$(grep -A3 'projectName:' ./infrastructure/serverless.yml | head -n1)
            PROJECT_NAME=${PROJECT_NAME//*projectName: /}
            [[ ${GITHUB_REF##*/} = master ]] && STAGE=prod || STAGE=${GITHUB_REF##*/}

            #caso n√£o exista a infraestrutura eu realizo o deploy
            {
              aws ssm get-parameter --name /$PROJECT_NAME/$STAGE/S3 --with-decryption
            } || {
              cd infrastructure
              npm i
              npm run deploy:$STAGE
              cd ..
            }

            S3_BUCKET=$(jq '.Parameter.Value' <<< $(aws ssm get-parameter --name /$PROJECT_NAME/$STAGE/S3 --with-decryption) | tr -d \")
            CLOUD_FRONT_DIST_ID=$(jq '.Parameter.Value' <<< $(aws ssm get-parameter --name /$PROJECT_NAME/$STAGE/CLOUDFRONT --with-decryption) | tr -d \")
            print_message "Geting all infos from parameter store - Finished"

            print_message "Copy to S3 - Start"
            aws s3 cp build/ s3://$S3_BUCKET/ --recursive --acl public-read --cache-control max-age=2592000
            print_message "Copy to S3 - Finished"

            print_message "Create invalidation cache - Start"
            aws cloudfront create-invalidation --distribution-id $CLOUD_FRONT_DIST_ID --paths "/*"
            print_message "Create invalidation cache - Finished"
          }
          deploy
